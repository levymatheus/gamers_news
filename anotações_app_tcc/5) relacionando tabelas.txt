1) Criamos mais uma tabela, agora a de jogos, que se relaciona com a tabela de categorias. 

2)  O procedimento de criação da tabela dos jogos é a mesma da de criação das categorias. o arquivo da migration de games está em src/database/migratons

3) A diferença da tabela de categorias é que a dos games deve ter uma coluna chamada caregory_id que é referenciando o id 
da categoria que esse jogo está. Também temos uma coluna de texto para a sinopse do jogo com informações relevantes para o leitor, temos uma coluna que armazena a url de uma thambnail, pois todo jogo precisa de uma thumbanail para que os leitores vejam a imagem da capa do jogo que vai ler ou seguir para acompanhar, além disso temos também a coluna featured que retorna um valor booleano para que futuramente possamos colocar em um destaque no front-end caso esse jogo seja um lançamento ou tenha muitos leitores desse titulo por ter uma noticia nova e etc. 

4)  temos o category_id: { Chave estrangeira: referencia outra tabela, no caso a tabela de categorias. 

5)  allowNull: false, // obrigatório, todo jogo precisa de uma categoria

6) references: { model: 'categories', key: 'id' }, // referenciamos no objeto o model categories e a chave id da categorias que queremos. Isso vai ficar setado para o game que criamos. No caso todo game vai está se referindo a uma categoria por esse id da categoria.

7)  onUpdate: 'CASCADE', // se tiver uma mudança de registros na tabela categorias, elas reflitam na tabela de games

8)  onDelete: 'RESTRICT' // Se for tentar excluir uma tabela que algum game dependa dela, não será possível

9) Setamos essas propriedades para cada jogo que for criado depender de uma categoria existente através dessa chave estrangeira. Essa propriedade de chave estrangeira também está presente na tabela de categorias como vimos anteriormente. Basicamente com isso iremos ter um relacionamento entre essas duas tabelas, porém ainda devemos ir no arquivo /models/index.ts para fazer o relacionamento entre essas tabelas.

10) Também criamos o model dessa tabela de games, mesma coisa do de criação de categorias, o que muda é que não é necessário obrigatoriedade do administrador de por um id, thumbnail e dizer se é lançamento. 
export interface GameCreationAttributes extends Optional<Game, 'id' | 'thumbnailUrl' | 'featured' > {}
analisando o código de interface em models/Games.ts vemos que setamos isso na propriedade Optional. 

11) No método define em model/Game.ts referenciamos também a propriedade categoryId que faz a comunicação com a tabela de categorias. 

12) em models/index.ts temos o primeiro relacionamento feito entre categorias e os jogos,  Pegamos alguns métodos do sequelize para fazer o relacionamento entre as tabelas, no primeiro caso uma categoria tem muitos jogos, então passamos o model de game para a categoria pelo método hasMany referenciando o model de game. Com isso, sempre que criamos um jogo, esse jogo vai ter relacionamento com uma categoria. Também passamos um método para o model de Game, o belongsTo referenciando o model de Category. Um jogo pertence a uma categoria, então passamos para o model Game o método belongsTo referenciando o model de categoria para esse jogo. 

13) Feito isso do passo anterior, temos um relacionamento entre as tabelas. Sempre que for criado um jogo esse jogo vai fazer parte de uma categoria e uma categoria terá muitos jogos. Com essa lógica futuramente iremos ter o mesmo para um jogo e as noticias sobre esse jogo. 

14) em resources criamos o game.ts e lá criamos os recursos que por padrão o administrador poderá editar como o nome do jogo, a sua sinopse, a capa do jogo, se o jogo está em destaque ou não e sua categoria. Também setamos o que pode ser filtrado, listado e mostrado para controle de conteúdo desse jogo pelo administrador.

15) criado o game.ts de recursos, incluímos ele no array de recursos que está presente em resources/index.ts para que esses recursos apareçam no painel administrativo. 