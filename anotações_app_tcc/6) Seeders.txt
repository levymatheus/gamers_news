1) Criamos alguns seeders para servir de testes alimentando a aplicação com dados de alguns games. Os seeders, traduzindo são "semeadores" que vão semear a aplicação com dados para o banco de dados, inserindo e excluindo registros. Basta criar um script e rodar um comando pelo sequelize para que esses seeders sejam executados, atribuindo esses dados no banco de dados. 

2) Inicialmente é semeada a tabela de categorias que já está criada, logo em seguida é semeada a tabela de games, com alguns títulos de jogos aleatórios, apenas para fins de testes.

3) Com o sequeli-cli no terminal, executamos o comando npx sequelize-cli seed:generate --name seed-categories-table que é para criar o arquivo JS que contem toda a configuração feita para o seeder das categorias. 

4) Após rodar o comando, o sequelize cria o arquivo que por padrão é em JS para ser setado algumas configurações do seeder.

6) Sua configuração é exatamente igual as migrations que criamos para as categorias, porém, esse arquivo de seeder é apenas executado para semear valores no banco de dados, e não de criação de tabelas como são as migrations. 

7) Nas migrations temos o método createTable onde e setado propriedades de criação de tabelas, no seeder passamos o método bulkInsert, setando o nome da tabela como argumento e em seguida um array de objetos com quantos valores quisermos. Esses valores são nomes de categorias, a posição que queremos no banco de dados, a data da criação e data de atualização das informações da categoria. 

 {name:'Survival Horror', position: 1, created_at: new Date(), updated_at: new Date()},

Observando o trecho de código, é visto que segue as colunas presentes na tabela de categorias: O nome da categoria, posição, data de criação e atualização. O método bulkInsert cuida de inserir todo valor que é setado nesse array de objetos dentro da tabela de categorias, basta executar o comando para que esses valores sejam inseridos em lote dentro da tabela. 

8) Utilizando o seeder evitamos de ter que rodar a aplicação e ter que inserir valores de forma manual no banco de dados. Dependendo do teste, acaba sendo uma tarefa demorada e cansativa, por isso é utilizado o seeder nessa fase de desenvolvimento, pois logo, são criadas muitas categorias e títulos de games para serem testados no funcionamento da aplicação.  

9) O seeder é como se o administrador fosse manualmente no painel administrativo por cada um desse valor, porém no contexto de desenvolvimento e testes, é feito de forma rápida e automatizada pelo sequelize-cli, inserindo registros de uma só vez, evitando repetições. 

10) Também é setado no arquivo de configuração JS o bulkDelete que é onde removemos todo os registros feitos pelo bulkInsert. Podemos usar querys, filtrando o que queremos excluir, caso não for o caso de excluir tudo de uma vez.

11) Para adicionar registros utilizamos o comando npx sequelize-cli db:seed:all esse comando executa todos os seeders configurados para a aplicação. 

12) Após rodar a aplicação é visto que temos categorias novas no painel administrativo. No seeder foi configurado categoria de Ação, Aventura, Esportes, Survival Horror e FPS. Com isso, podemos ver esses valores no painel, com sua posição que foi setada e id criado automaticamente pelo banco de dados. 

13) Para remover esses registros, executamos o comando npx sequelize-cli db:seed:undo:all
executado o comando, podemos observar que os registros de categorias que foram criados não existem mais. 

14) Após a criação do seeder de categorias, temos o seeder dos games, que alimenta a tabela de games. Sua criação é do mesmo método de criação do seeder de categorias, apenas passando setando o nome da tabela e os valores referentes a cada coluna da tabela. 

{ name: 'God Of War 20', synopsis: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', featured: true, category_id: categories[0].id, created_at: new Date(), updated_at: new Date() },

Acima temos uma breve demonstração de um objeto contendo um dos valores que o seeder vai popular na tabela de games. Note que ele temos algumas diferenças como a propriedade featured que é onde setamos se o jogo está em destaque para os leitores e um category_id. Esse category_id referenciamos qual categorias queremos que esse game faça parte. É possível fazer isso pelo seeder, apenas precisamos setar o id da categoria que queremos que esse jogo faça parte, por exemplo, o id da categoria de Esportes é 1 passamos o valor 0 em category_id, pois no contexto de máquina, o valor 0 faz referencia à posição 1, então, para o game de futebol EA Sports FC passamos o valor 0, referenciando a categoria de Esportes. Isso acontece porque os valores das categorias são guardadas em um array, e por padrão arrays iniciam sua contagem em 0, logo, o valor 0 é uma referência ao id 1. 

15) Vale lembrar que diferente do bulkInsert presente em categorias, no seeder de games temos o método query, que selecionamos uma query especifica para setar esses registros de games na categoria correta. 
query('SELECT id FROM categories') com isso, atribuímos cada game no id da categoria correta, como foi explicado acima. No caso, essa query é do SQL, e setamos ela, selecionando cada id das categorias e setando na propriedade category_id. Após feita essa query, temos o bulkInsert, inserindo esses valores na tabela de games e gerando o relacionamento de cada jogo à uma categoria. 

16) Para a função de remover esses valores usamos o bulkDelete para remover os valores adicionados, caso for preciso. Lembrando que são apenas registros de testes.

17) Podemos executar apenas um seed: npx sequelize-cli db:seed --seed \src\database\seeders\20240426071540-seed-games-table.js
 passando aminho da pasta do seed e seu nome. Isso evita de executarmos vários seeders diversas vezes, evitando registros repetidos como é feito com o npx sequelize-cli db:seed:all  

16) Após executar o comando do seed de games, podemos ver no painel cada registro que foi configurado no arquivo de seeder de games. Lá pode ser observado que cada jogo está relacionado a uma categoria, pois setamos para cada jogo um id especifico da categoria. 

17) Com isso, podemos popular o banco de dados de forma automática rodando apenas comandos básicos com o sequelize-cli para testes no desenvolvimento da aplicação. 