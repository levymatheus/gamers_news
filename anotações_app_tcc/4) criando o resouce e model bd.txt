1) As migrations basicamente é onde controlamos nosso banco de dados na nossa aplicação, controles esses feitos pelo sequelize-cli que é a interface
de linha de comando do sequelize dentro da aplicação. Com a sequelize temos as funções up e down que são definidas para criar, alterar e até mesmo remover
informações do nosso banco de dados. Resumidamente com as migrations podemos criar as tabelas do nosso banco de dados. Ao longo do tempo essas migrations
facilitam a manutenção das tabelas do nosso banco de dados. 

2) criando a primeira migration com o comando ==> npx sequelize-cli migration:generate --name create-categorioes-table
com esse comando criamos nossa primeira tabela de banco de dados da aplicação, essa tabela é onde ficam as categorias
categorias essas como: Jogos de esportes, tiro, luta, simuladores e etc. Como o contexto da nossa aplicação é noticia sobre jogos, 
vamos separar por categorias.

3) Em uma aplicação de noticias, temos categorias como: Politica, Policial, Esportes, Clima, Compras, e etc.
No contexto da aplicação desse projeto temos apenas divididos pelas categorias dos games.

4) feito isso, como configuramos o arquivo de pastas do sequelize para as migrations no caminho para databese,
nossa migration de categorias foi criada. Agora podemos gerencias o estado da nossa tabela de categorias.

5) criado a migration e setamos alguns atributos nesse arquivo js,  temos o método up, que basicamente é onde setamos  as
propriedades que criam as colunas da tabela. Temos o id, name, position, created_at e updated_at. Em id, temos uma chave primária que é onde vamos
relacionar uma categoria a um jogo especifico. Por exemplo, FIFA 23, um jogo de esporte, fica na categoria Esportes. 

6) no código, a razão pela qual precisamos dos métodos up e down é para ter controle total sobre as alterações do banco de dados. Com esses dois métodos,  podemos avançar (up) ou retroceder (down) nas versões do nosso banco de dados.

7) feito isso podemos rodar a migration para que de fato a tabela de categorias seja criada. inicialmente apenas criamos a migration que é onde gerenciamos
a tabela, agora com o comando ===> npx sequelize-cli db:migrate a migration é executada, sendo assim criando a tabela.

6) ao abrir o pgAdmin podemos visualizar que a tabela de categorias já está disponível em nosso banco de dados. com isso, nossa tabela já está
esquematizada e funcionado. Agora devemos conectar essa tabela na aplicação com o adminJs para que possamos criar nossas categorias.

7) Criamos o model, o model é a interação da tabela na aplicação. 

8) No código Category.ts importamos a tipagem para os atributos que receberão os valores e alguns outros métodos do sequelize.
Temos uma interface ts que se comunica com as colunas ta tabela, temos uma interface chamada CategoryCreationAttribures que se comunica com 
a interface Category, essa interface basicamente seta um id para a categoria que estamos criando.

9) No mesmo model ts, temos a interface CategoryInstance, que representa a instância de uma categoria criada no banco de dados. Basicamente ela faz com que 
possamos usar todos os métodos e propriedades do sequelize nessa categoria que estamos criando, no caso faz com que possamos manipular-la no contexto 
da nossa aplicação.

10) Em sequelize.define<CategoryInstance, Category>('Category', {...}) setamos o método define que basicamente junta as interfaces que criamos e setamos alguns argumentos para id, name, position, se a propriedade pode ser nula ou não, que no caso é não, a chave primaria da categoria criada, cria um id automático pelo 
banco, e os tipos das datas. Modelar esses models é sempre a parte mais difícil mas logo iremos compreender mais fazendo outros models que seguem a mesma 
lógica. Nesse caso essa sequelize.define faz a tipagem para cada registro de categoria na aplicação, mandando então essa instância de objeto categoria para o 
banco de dados.

11) para todo model passamos os tipos para as propriedades do objeto, os atributos de criação e os opcionais caso queiramos, a interface da instancia do registro
com os métodos do sequelize e definir a instância do objeto do sequelize para a tabela. 

12) criamos na pasta models um arquivo index.ts onde futuramente iremos fazer os relacionamentos com nossas tabelas do banco de dados. 

13) Criamos os " formulários " ou "text areas" dentro do adminJs para criar nossas categorias dentro do nosso painel. Dar nome para elas e etc.

14) Chamamos esses formulários de resouces, na pasta do adminJs teremos a pasta resources com todos os resources para nosso painel.

15)  Criado o resource de categorias, setamos alguns atributos dentro de um objeto chamado categoryResourceOptions: nesses atributos podemos definir
o que vai ser editável nos campos de criação de categorias, o que é filtrável, dentre outras. Nesse caso, colocamos as categorias para aparecer no menu lateral
do nosso painel, e nesse menu, podemos editar o nome das categorias e sua posição quando quisermos ou não deixar uma categoria em destaque.
Também setamos filtros quando quisermos filtrar categorias por nome, posição, data de criação e atualização, e o que queremos listar de informação para o administrador, que no caso é o id, nome e posição.

16) futuramente vamos instalar um pacote de tradução para as informações que ficarão visíveis para os administradores.

17) na pasta resources criamos uma outra pasta index.ts que é onde iremos juntar todos os resources e colocar em conjunto na barra de navegação do adminJs juntamente com as configurações dos models. 

18) Por fim, no arquivo principal de configuração do painel em adminjs/index.ts, atribuímos os resources do nosso adminJs da aplicação para aparecer
no painel do administrador. com isso, será possível do administrador navegar entre as diferentes categorias, jogos e noticias, administrando o conteúdo.

19) Resumo: Criamos as opções gerenciáveis das categorias, criamos a pasta onde vão ficar as outras opções (jogos, noticias) gerenciáveis pelo nosso painel e lincamos com a tabela de categorias no banco de dados, e setamos o adminJsResources que é o passo anterior, a pasta onde ficam essas opções lincadas, sendo assim, podendo então o administrador manipular as categorias do nosso painel. 

20) Feito todos esses passos, no painel administrativo podemos já criar nossas categorias e visualizar elas em listas no próprio painel administrativo e até mesmo filtrar essas informações. Também se olharmos o banco de dados, a cada nova categoria criada, ela vai estar presente no nosso banco de dados. 

21) Para as tabelas de jogos e as de noticas seguimos os mesmos passos.

